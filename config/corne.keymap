
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define RAISE   1
#define NUM     2

#pragma once

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0
#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11
#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12
#define RM0 18  // right-middle row
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23
#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24
#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35
#define LH0 38  // left thumb keys
#define LH1 37
#define LH2 36
#define RH0 39  // right thumb keys
#define RH1 40
#define RH2 41
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

//visualize keymap at https://nickcoutsos.github.io/keymap-editor/

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <100>;
    quick-tap-ms = <100>;
};

/ {
    behaviours {
        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hold_tapr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmrl: hold_taprl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmll: hold_tapll {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        mytap: mytap {
            compatible = "zmk,behavior-hold-tap";
            label = "MYTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <50>;
        };

        shiftesc: shiftesc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <50>;
        };
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        dquote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 20>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 20>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        hyp {
            bindings = <&kp MINUS>;
            key-positions = <16 19>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <15 16>;
            layers = <0>;
        };

        shortcatcombo {
            bindings = <&shortcat>;
            key-positions = <18 16>;
            layers = <0>;
        };
    };

    macros {
        up_dir: up_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "UP_DIR";
        };

        shortcat: shortcat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>;
            label = "SHORTCAT";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(NUMBER_4))>;
            label = "SCREENSHOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp SQT         &kp Q  &kp W  &kp E             &kp R         &kp T        &kp Y          &kp U           &kp I      &kp O    &kp P               &kp TILDE
&mo 1           &kp A  &kp S  &kp D             &hml LCTRL F  &kp G        &kp H          &hmr LGUI J     &kp K      &kp L    &mt LGUI SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C             &kp V         &kp B        &kp N          &kp M           &kp COMMA  &kp DOT  &kp FSLH            &kp LEFT_SHIFT
                              &mt LEFT_ALT TAB  &lt 4 ESCAPE  &kp ENTER    &kp BACKSPACE  &mytap 2 SPACE  &mo 1
            >;
        };

        nav_layer {
            bindings = <
&kp LS(LA(PERIOD))  &mkp MCLK  &mkp LCLK         &kp LC(LA(A))       &mkp RCLK      &kp LA(LC(U))    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN   &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &none
&kp LS(LA(V))       &mkp LCLK  &kp LA(LC(G))     &kp LC(LA(B))       &kp LC(LA(C))  &kp LA(LC(O))    &kp LEFT              &kp DOWN              &kp UP_ARROW   &kp RIGHT        &kp LEFT_SHIFT    &none
&mo 3               &mkp RCLK  &kp LS(LEFT_ALT)  &kp LA(LEFT_SHIFT)  &kp LA(LCTRL)  &kp LA(LC(I))    &mkp LCLK             &kp LS(LG(U))         &kp LS(LG(I))  &kp LS(LG(O))    &mkp RCLK         &mkp MCLK
                                                 &kp LS(LA(N))       &kp ESCAPE     &kp ENTER        &none                 &mo 5                 &none
            >;
        };

        symbol {
            bindings = <
&kp GRAVE    &kp LESS_THAN      &kp LESS_THAN  &kp GREATER_THAN  &kp DOLLAR  &kp PERIOD        &kp AMPS  &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &none        &trans
&kp RS(TAB)  &kp DOUBLE_QUOTES  &kp MINUS      &kp PLUS          &kp EQUAL   &kp TILDE         &kp PIPE  &kp COLON    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT  &none
&screenshot  &kp EXCLAMATION    &kp BACKSLASH  &kp ASTERISK      &kp CARET   &up_dir           &kp HASH  &kp DOLLAR   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH    &trans
                                               &kp LS(TAB)       &mo 4       &kp UNDERSCORE    &trans    &trans       &kp LEFT_GUI
            >;
        };

        sys_layer {
            bindings = <
&bootloader  &bt BT_CLR_ALL  &trans  &trans      &trans         &sys_reset       &sys_reset    &trans        &trans        &trans  &trans  &bootloader
&trans       &trans          &trans  &trans      &none          &trans           &trans        &trans        &trans        &trans  &trans  &trans
&none        &trans          &trans  &trans      &trans         &bt BT_CLR       &trans        &trans        &trans        &trans  &trans  &trans
                                     &bt BT_NXT  &bt BT_DISC 0  &bt BT_DISC 1    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;
        };

        shift {
            bindings = <
&trans  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)    &kp LS(Y)  &kp LS(U)  &kp LS(I)   &kp LS(O)   &kp LS(P)      &trans
&trans  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)    &kp LS(H)  &kp LS(J)  &kp LS(K)   &kp LS(L)   &kp LS(COLON)  &trans
&trans  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)    &kp LS(N)  &kp LS(M)  &kp LS(LT)  &kp LS(GT)  &kp LS(QMARK)  &trans
                              &trans     &trans     &trans       &trans     &mo 2      &trans
            >;
        };

        num_layer {
            bindings = <
&kp AMPERSAND  &none              &kp H      &kp K       &kp J          &kp L         &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp NON_US_BACKSLASH  &trans
&none          &kp DOUBLE_QUOTES  &kp ENTER  &kp SPACE   &kp BACKSPACE  &kp PERIOD    &kp MINUS     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0                &trans
&none          &none              &none      &none       &kp COMMA      &kp MINUS     &kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp GRAVE             &trans
                                             &kp PERIOD  &kp SPACE      &kp EQUAL     &kp BSPC      &kp NUMBER_0  &kp DOLLAR
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_sys {
            if-layers = <2 4>;
            then-layer = <5>;
        };
    };
};
