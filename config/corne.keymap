/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define RAISE   1
#define NUM     2

#pragma once

//visualize keymap at https://nickcoutsos.github.io/keymap-editor/

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <120>;
    quick-tap-ms = <120>;
};

/ {
    behaviours {
        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        mytap: mytap {
            compatible = "zmk,behavior-hold-tap";
            label = "MYTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <50>;
        };

        shiftesc: shiftesc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <50>;
        };
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        dquote {
            bindings = <&kp TAB>;
            key-positions = <19 20>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 20>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        hyp {
            bindings = <&kp MINUS>;
            key-positions = <16 19>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <15 16>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 21>;
        };

        star {
            bindings = <&kp ASTERISK>;
            key-positions = <15 20>;
        };

        par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 22>;
        };

        brac {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
        };
    };

    macros {
        up_dir: up_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "UP_DIR";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        shortcat: shortcat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>;
            label = "SHORTCAT";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(NUMBER_4))>;
            label = "SCREENSHOT";
        };

        mac_next_word: mac_next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT)>;
            label = "MAC_NEXT_WORD";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        mac_prev_word: mac_prev_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT)>;
            label = "MAC_PREV_WORD";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        line_before: line_before {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp END &kp ENTER>;
            label = "LINE_BEFORE";
            wait-ms = <50>;
            tap-ms = <25>;
        };

        cur_line: cur_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT &kp RS(RIGHT)>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "LINE_BEFORE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        alfred: alfred {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "ALFRED";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LEFT_GUI  &kp Q  &kp W  &kp E                 &kp R                  &kp T        &kp Y          &kp U              &kp I          &kp O    &kp P          &none
&mo 1         &kp A  &kp S  &kp D                 &kp F                  &kp G        &kp H          &kp J              &kp K          &kp L    &kp SEMICOLON  &kp LEFT_GUI
&kp LEFT_ALT  &kp Z  &kp X  &kp C                 &kp V                  &kp B        &kp N          &kp M              &kp COMMA      &kp DOT  &kp SLASH      &kp LEFT_ALT
                            &mt LEFT_ALT LS(TAB)  &mt LEFT_SHIFT ESCAPE  &kp ENTER    &kp BACKSPACE  &shiftesc 3 SPACE  &mt LCTRL TAB
            >;
        };

        nav_layer {
            bindings = <
&screenshot  &kp LG(W)  &line_before  &cur_line       &kp LG(R)     &kp LG(LS(T))    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &kp LC(LA(U))
&none        &kp LG(A)  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT  &none            &kp LEFT              &kp DOWN              &kp UP_ARROW  &kp RIGHT        &kp LEFT_SHIFT    &kp LC(LA(O))
&mo 4        &kp LG(Z)  &kp LG(X)     &kp LG(C)       &kp LG(V)     &none            &none                 &kp HOME              &kp END       &none            &none             &kp LA(LC(I))
                                      &kp RCTRL       &kp HOME      &line_before     &kp DELETE            &kp END               &cur_line
            >;
        };

        symbol {
            bindings = <
&kp GRAVE  &kp GRAVE        &kp LESS_THAN  &kp GREATER_THAN  &kp AMPERSAND  &none        &none     &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE     &trans
&none      &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL      &kp TILDE    &kp PIPE  &kp COLON    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT   &none
&none      &kp BACKSLASH    &kp SLASH      &kp ASTERISK      &kp CARET      &up_dir      &kp HASH  &kp DOLLAR   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp QUESTION  &trans
                                           &kp LS(TAB)       &mo 5          &alfred      &trans    &trans       &kp LEFT_GUI
            >;
        };

        layer_6 {
            bindings = <
&kp COLON  &kp BACKSLASH  &kp EXCLAMATION   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AMPS     &kp AT      &kp N7        &kp N8        &kp N9        &kp GRAVE    &none
&kp TILDE  &kp PLUS       &kp MINUS         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET    &kp DOLLAR  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0       &kp DOUBLE_QUOTES
&none      &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE     &kp HASH    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERCENT  &none
                                            &kp SPACE             &kp EQUAL              &kp ENTER    &trans      &trans        &trans
            >;
        };

        sys_layer {
            bindings = <
&bootloader  &bt BT_CLR_ALL  &trans  &trans      &trans         &sys_reset       &sys_reset    &trans        &trans        &trans  &trans  &bootloader
&trans       &trans          &trans  &trans      &none          &trans           &trans        &trans        &trans        &trans  &trans  &trans
&none        &trans          &trans  &trans      &trans         &bt BT_CLR       &trans        &trans        &trans        &trans  &trans  &trans
                                     &bt BT_NXT  &bt BT_DISC 0  &bt BT_DISC 1    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;
        };

        shift {
            bindings = <
&trans  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)    &kp LS(Y)  &kp LS(U)  &kp LS(I)   &kp LS(O)   &kp LS(P)      &trans
&trans  &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)    &kp LS(H)  &kp LS(J)  &kp LS(K)   &kp LS(L)   &kp LS(COLON)  &trans
&trans  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)    &kp LS(N)  &kp LS(M)  &kp LS(LT)  &kp LS(GT)  &kp LS(QMARK)  &trans
                              &trans     &trans     &trans       &trans     &none      &trans
            >;
        };

        num_layer {
            bindings = <
&none  &none      &kp H      &kp K  &kp J      &kp L        &none     &kp N7        &kp N8        &kp N9        &none       &trans
&none  &kp LS(A)  &kp LS(S)  &none  &kp SPACE  &none        &none     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0      &trans
&none  &none      &none      &none  &kp COMMA  &kp MINUS    &none     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &trans
                             &none  &kp SPACE  &kp EQUAL    &kp BSPC  &mo 5         &kp DOLLAR
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};

