
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define RAISE   1
#define NUM     2
#pragma once

#define LT0  5  // left-top row
#define LT1  4
#define LT2  3
#define LT3  2
#define LT4  1
#define LT5  0

#define RT0  6  // right-top row
#define RT1  7
#define RT2  8
#define RT3  9
#define RT4 10
#define RT5 11

#define LM0 17  // left-middle row
#define LM1 16
#define LM2 15
#define LM3 14
#define LM4 13
#define LM5 12

#define RM0 18  // right-middle row
#define RM1 19

#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

#define LB0 29  // left-bottom row
#define LB1 28
#define LB2 27
#define LB3 26
#define LB4 25
#define LB5 24

#define RB0 30  // right-bottom row
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

#define LH0 38  // left thumb keys
#define LH1 37
#define LH2 36

#define RH0 39  // right thumb keys
#define RH1 40
#define RH2 41

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 

//visualize keymap at https://nickcoutsos.github.io/keymap-editor/
&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
    require-prior-idle-ms = <125>;
};

/ {
    behaviours {
        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
        hml: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <80>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <50>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        
        hmr: hold_tapr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <80>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <50>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        
        hmrl: hold_taprl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <80>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <50>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmll: hold_tapll {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <80>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <50>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp CAPS           &kp Q  &kp W  &kp E         &kp R                  &kp T    &kp Y          &kp U        &kp I      &kp O    &kp P          &kp TILDE
&kp TAB  &hmll NUM A  &hmll RAISE S &hml LSHIFT D         &hml LCTRL F           &kp G    &hmrl RAISE H          &hmr LEFT_COMMAND J        &hmr RSHIFT K      &hmrl NUM L    &kp SEMICOLON  &kp SQT
&mo 1             &kp Z  &kp X  &kp C         &kp V                  &kp B    &kp N          &kp M        &kp COMMA  &kp DOT  &kp FSLH       &kp LCTRL
                                &kp LEFT_ALT  &mt LSHIFT ESCAPE  &kp ENTER    &kp BACKSPACE  &kp SPACE    &mo RAISE
            >;
        };

        raise_layer {
            bindings = <
&bootloader  &trans  &kp LA(LC(U))  &kp LC(LA(I))  &kp LA(LC(O))  &kp LA(LS(PERIOD))    &kp PIPE   &kp NON_US_BACKSLASH  &kp CARET       &kp BSLH      &kp PIPE      &bootloader
&sys_reset   &trans  &kp LS(LG(U))  &kp LS(LG(I))  &kp LS(LG(O))  &kp LS(LA(O))         &kp LEFT   &kp DOWN              &kp UP_ARROW    &kp RIGHT     &trans        &sys_reset
&trans       &kp LT  &kp GT         &kp COMMA      &kp SEMICOLON  &kp SEMI              &kp TILDE  &kp MINUS             &kp UNDERSCORE  &kp C_VOL_DN  &kp C_VOL_UP  &trans
                                    &kp ESC        &trans         &kp TAB               &mo RAISE  &trans                &trans
            >;
        };

        num_layer {
            bindings = <
&kp AMPERSAND     &kp EXCLAMATION  &kp AT_SIGN       &kp LESS_THAN              &kp GREATER_THAN               &kp HASH          &kp ASTERISK  &kp N7        &kp N8          &kp N9        &kp NON_US_BACKSLASH  &trans
&kp CARET  &kp PIPE         &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE &kp UNDERSCORE &kp MINUS     &kp NUMBER_4  &kp N5          &kp NUMBER_6  &kp EQUAL             &trans
&kp PERCENT     &kp DOLLAR    &kp RIGHT_BRACKET &kp RIGHT_BRACKET            &kp RIGHT_BRACE        &kp MINUS        &kp PLUS      &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3  &kp GRAVE             &trans
                                              &kp N0                &kp DOT                &none                &kp BSPC      &kp NUMBER_0  &kp UNDERSCORE
            >;
        };
    };
};
